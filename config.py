"""
Configuration module for the Auto-Poster Bot.
Loads environment variables and provides configuration constants.
"""

import os
import logging
from dotenv import load_dotenv

logger = logging.getLogger(__name__)

# Load environment variables from .env file
load_dotenv()

# Telegram Configuration
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', '0'))
TELEGRAM_GROUP_ID = os.getenv('TELEGRAM_GROUP_ID')

# Instagram Configuration
INSTAGRAM_USERNAME = os.getenv('INSTAGRAM_USERNAME')
INSTAGRAM_PASSWORD = os.getenv('INSTAGRAM_PASSWORD')
INSTAGRAM_SESSIONID = os.getenv('INSTAGRAM_SESSIONID')  # Optional: session cookie fallback

# VK Configuration
VK_ACCESS_TOKEN = os.getenv('VK_ACCESS_TOKEN')
VK_GROUP_ID = os.getenv('VK_GROUP_ID')

# Google AI Configuration
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

# Image Processing Configuration
MAX_IMAGE_SIZE = (1080, 1080)  # Square format
STORY_IMAGE_SIZE = (1080, 1350)  # Story format
MAX_FILE_SIZE = 8 * 1024 * 1024  # 8MB in bytes
SUPPORTED_FORMATS = ['JPEG', 'PNG', 'WEBP']

# Paths
SESSIONS_DIR = 'sessions'
UPLOADS_DIR = 'uploads'

# Logging
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO').upper()  # DEBUG, INFO, WARNING, ERROR, CRITICAL

# Validation
def validate_config():
    """Validate that all required configuration is present."""
    required_vars = {
        'TELEGRAM_BOT_TOKEN': TELEGRAM_BOT_TOKEN,
        'ADMIN_USER_ID': ADMIN_USER_ID,
        'TELEGRAM_GROUP_ID': TELEGRAM_GROUP_ID,
        # Allow auth via USERNAME+PASSWORD or SESSIONID
        # We'll validate at runtime: at least one method must be provided
    }
    
    missing_vars = [var for var, value in required_vars.items() if not value]
    
    if missing_vars:
        raise ValueError(f"Missing required environment variables: {', '.join(missing_vars)}")
    
    if ADMIN_USER_ID == 0:
        raise ValueError("ADMIN_USER_ID must be a valid integer")
    
    # Instagram auth validation: require either creds or sessionid
    if not ((INSTAGRAM_USERNAME and INSTAGRAM_PASSWORD) or INSTAGRAM_SESSIONID):
        raise ValueError("Provide INSTAGRAM_USERNAME+INSTAGRAM_PASSWORD or INSTAGRAM_SESSIONID in .env")
    
    # VK validation (optional)
    if not (VK_ACCESS_TOKEN and VK_GROUP_ID):
        logger.warning("VK_ACCESS_TOKEN or VK_GROUP_ID not provided - VK posting will be disabled")
    
    # Google AI validation (optional)
    if not GOOGLE_API_KEY:
        logger.warning("GOOGLE_API_KEY not provided - AI assistance will be disabled")
    
    return True

# Bot Messages
MESSAGES = {
    'welcome': "ü§ñ –ë–æ—Ç –∞–≤—Ç–æ‚Äë–ø–æ—Å—Ç–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω!\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ(–∞), –∑–∞—Ç–µ–º –ø–æ–¥–ø–∏—Å—å ‚Äî –æ–ø—É–±–ª–∏–∫—É—é –≤ Instagram –∏ Telegram.",
    'send_caption': "üìù –ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É.",
    'processing': "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏ –ø—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç...",
    'success': "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Instagram –∏ Telegram!",
    'error': "‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {error}",
    'unauthorized': "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.",
    'invalid_photo': "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ç–æ.",
    'too_many_photos': "üì∏ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–æ—Ç–æ! –î–æ–ø—É—Å—Ç–∏–º–æ 1‚Äì10 —à—Ç—É–∫.",
    'no_photos': "üì∑ –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –ø–æ—Ç–æ–º –ø–æ–¥–ø–∏—Å—å.",
    'instagram_error': "üì∏ –û—à–∏–±–∫–∞ Instagram: {error}",
    'telegram_error': "üí¨ –û—à–∏–±–∫–∞ Telegram: {error}",
    'cancelled': "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–Ω–æ–ø–∫–∏ 'üöÄ –ù–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é'.",
    'cancelled_scheduled': "‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
    'cancelled_cleanup': "üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
}
