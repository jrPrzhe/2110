"""
Admin handler for the Auto-Poster Bot.
Handles admin messages, photo processing, and post publishing.
"""

import os
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import Update, Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telegram.ext import ContextTypes
from telegram.error import TelegramError

from config import ADMIN_USER_ID, MESSAGES
from utils.image_processor import ImageProcessor
from services.instagram_service import InstagramService
from services.telegram_service import TelegramService
from services.vk_service import VKService
from services.ai_service import AIService
from services.scheduler_service import SchedulerService, QueuedPost

logger = logging.getLogger("admin")

class AdminHandler:
    """Handles admin interactions and post processing."""
    
    def __init__(self):
        """Initialize the admin handler."""
        self.image_processor = ImageProcessor()
        self.instagram_service = InstagramService()
        self.telegram_service = TelegramService()
        self.vk_service = VKService()
        self.ai_service = AIService()
        self.scheduler_service = SchedulerService()
        
        # User state management: {user_id: {'photos': [], 'waiting_for_caption': bool, 'post_mode': 'auto'|'single'|'multi'|'reels', 'target_platform': 'both'|'instagram'|'telegram'|'vk'|'all', 'step': 'start'|'type_selected'|'platform_selected'|'article_check_selection'|'photos_uploaded'|'caption_entered'|'preview_shown'|'scheduled'|'reels_url_input'|'reels_download', 'cancelled': bool, 'check_articles': bool, 'reels_url': str, 'reels_video_path': str}}
        self.user_states: Dict[int, Dict] = {}
        # Pending posts waiting for approval: {user_id: {'photos': [], 'caption': str, 'message_id': int, 'target_platform': str, 'scheduled_time': datetime}}
        self.pending_posts: Dict[int, Dict] = {}
        # Scheduled posts: {user_id: {'task': asyncio.Task, 'post_data': dict}}
        self.scheduled_posts: Dict[int, Dict] = {}
        
        # Set up scheduler publish callback
        self.scheduler_service.set_publish_callback(self._publish_from_queue)

    def get_main_keyboard(self) -> ReplyKeyboardMarkup:
        """Return the main reply keyboard for quick actions."""
        keyboard = [
            [KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é")],
            [KeyboardButton("üìã –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É")],
            [KeyboardButton("‚úÖ Status"), KeyboardButton("‚ùå Cancel")],
            [KeyboardButton("‚ÑπÔ∏è Help")],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_type_selection_keyboard(self) -> ReplyKeyboardMarkup:
        """Return keyboard for post type selection (deprecated - now auto-detect)."""
        keyboard = [
            [KeyboardButton("üì∑ –û–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ—Å—Ç"), KeyboardButton("üì∏ –ú–∞—Å—Å–æ–≤—ã–π –ø–æ—Å—Ç")],
            [KeyboardButton("üìπ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–∏–ª—Å")],
            [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_content_input_keyboard(self) -> ReplyKeyboardMarkup:
        """Return keyboard for content input step."""
        keyboard = [
            [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_platform_selection_keyboard(self) -> ReplyKeyboardMarkup:
        """Return keyboard for platform selection."""
        keyboard = [
            [KeyboardButton("üì∑ Instagram"), KeyboardButton("üí¨ Telegram")],
            [KeyboardButton("üîµ VK"), KeyboardButton("üîÄ –í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")],
            [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_article_check_keyboard(self) -> ReplyKeyboardMarkup:
        """Return keyboard for article check selection."""
        keyboard = [
            [KeyboardButton("üîç –î–∞, –∏—Å–∫–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã"), KeyboardButton("‚è≠Ô∏è –ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
            [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_schedule_keyboard(self) -> ReplyKeyboardMarkup:
        """Return keyboard for scheduling options."""
        keyboard = [
            [KeyboardButton("‚ö° –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å"), KeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton("ü§ñ –ü–æ–º–æ—â—å –ò–ò"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def is_admin(self, user_id: int) -> bool:
        """
        Check if user is authorized admin.
        
        Args:
            user_id: Telegram user ID
            
        Returns:
            bool: True if user is admin
        """
        return user_id == ADMIN_USER_ID
    
    def get_user_state(self, user_id: int) -> Dict:
        """
        Get user state or create new one.
        
        Args:
            user_id: Telegram user ID
            
        Returns:
            dict: User state dictionary
        """
        if user_id not in self.user_states:
            self.user_states[user_id] = {
                'photos': [],
                'waiting_for_caption': False,
                'post_mode': 'auto',  # 'single' or 'multi' or 'reels'
                'target_platform': 'both',  # 'instagram' | 'telegram' | 'vk' | 'both' | 'all'
                'step': 'start',  # 'start' | 'type_selected' | 'platform_selected' | 'article_check_selection' | 'photos_uploaded' | 'caption_entered' | 'preview_shown' | 'scheduled' | 'reels_url_input' | 'reels_download' | 'reels_waiting_caption'
                'scheduled_time': None,
                'article_numbers': [],  # List of found article numbers
                'cancelled': False,  # Flag to indicate if operation was cancelled
                'check_articles': True,  # Flag to indicate if article check is needed
                'reels_url': None,  # Instagram reels URL
                'reels_video_path': None,  # Downloaded video path
            }
        return self.user_states[user_id]
    
    def clear_user_state(self, user_id: int):
        """
        Clear user state and cleanup files.
        
        Args:
            user_id: Telegram user ID
        """
        if user_id in self.user_states:
            state = self.user_states[user_id]
            # Cleanup photo files
            if state.get('photos'):
                self.image_processor.cleanup_files(state['photos'])
            # Clear state
            del self.user_states[user_id]
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle photo messages from admin with auto-detection.
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        try:
            # Get user state
            user_state = self.get_user_state(update.effective_user.id)
            
            # Check if we're in the right step, or allow direct photo upload
            if user_state['step'] not in ['content_input', 'photos_upload', 'caption_entered']:
                # Allow direct photo upload - set default values
                user_state['post_mode'] = 'auto'  # Auto-detect mode
                user_state['target_platform'] = 'both'  # Default to both platforms
                user_state['check_articles'] = True  # Default to article check
                user_state['step'] = 'content_input'
                await update.message.reply_text("üì∏ –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ! –†–µ–∂–∏–º: –∞–≤—Ç–æ, –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: Instagram + Telegram, –ø–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤: –≤–∫–ª—é—á–µ–Ω")
            
            # Auto-detect: photos = photo post mode
            user_state['post_mode'] = 'multi'  # Will handle single/multi automatically by count
            
            # Get the highest resolution photo
            photo = update.message.photo[-1]
            file = await context.bot.get_file(photo.file_id)
            
            # Download photo
            photo_path = os.path.join(self.image_processor.uploads_dir, f"temp_{photo.file_id}.jpg")
            await file.download_to_drive(photo_path)
            
            # Validate photo
            if not self.image_processor.validate_image(photo_path):
                os.remove(photo_path)
                await update.message.reply_text(MESSAGES['invalid_photo'])
                return
            
            # Add photo to state (auto mode allows multiple photos)
            user_state['photos'].append(photo_path)
            
            # Check photo count
            if len(user_state['photos']) > 10:
                self.clear_user_state(update.effective_user.id)
                await update.message.reply_text(MESSAGES['too_many_photos'])
                return
            
            # Update step
            user_state['step'] = 'photos_uploaded'
            user_state['waiting_for_caption'] = True
            
            # Search for article numbers in uploaded photos (if enabled)
            article_numbers = []
            if user_state.get('check_articles', True):
                processing_msg = await update.message.reply_text("üîç –ò—â—É –∞—Ä—Ç–∏–∫—É–ª—ã –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö...")
                
                # Update message to show progress
                await processing_msg.edit_text("üîç –ò—â—É –∞—Ä—Ç–∏–∫—É–ª—ã –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö...\n\nüì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
                
                # Check if cancelled before processing
                if user_state.get('cancelled', False):
                    await processing_msg.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    return
                
                article_numbers = await self.image_processor.extract_article_numbers_async(user_state['photos'], self.ai_service)
                
                # Check if cancelled after processing
                if user_state.get('cancelled', False):
                    await processing_msg.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    return
                
                # Store article numbers in user state
                user_state['article_numbers'] = article_numbers
            else:
                # Skip article check
                user_state['article_numbers'] = []
            
            # Reply based on photo count, mode, and found articles
            mode = user_state.get('post_mode', 'multi')
            
            # Create detailed article info
            if user_state.get('check_articles', True):
                if article_numbers:
                    articles_text = self.image_processor.format_articles_for_caption(article_numbers)
                    article_info = f"\n\n‚úÖ <b>–ù–∞–π–¥–µ–Ω—ã –∞—Ä—Ç–∏–∫—É–ª—ã:</b>\n{articles_text}\n\nüìù –ê—Ä—Ç–∏–∫—É–ª—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"
                else:
                    article_info = "\n\n‚ùå <b>–ê—Ä—Ç–∏–∫—É–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Å –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤"
            else:
                article_info = "\n\n‚è≠Ô∏è <b>–ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω</b>\n\nüìù –ê—Ä—Ç–∏–∫—É–ª—ã –Ω–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø–æ—Å—Ç"
            
            # Create response message
            if mode == 'single':
                response_text = f"üì∑ <b>–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!</b>{article_info}\n\nüìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É."
            else:
                if len(user_state['photos']) == 1:
                    response_text = f"üì∏ <b>–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!</b>{article_info}\n\nüì∏ –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ (–¥–æ 10) –∏–ª–∏ —Å—Ä–∞–∑—É –ø–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É."
                else:
                    response_text = f"üì∏ <b>–§–æ—Ç–æ {len(user_state['photos'])} –∑–∞–≥—Ä—É–∂–µ–Ω–æ.</b>{article_info}\n\nüì∏ –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ (–¥–æ 10) –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É."
            
            if user_state.get('check_articles', True):
                await processing_msg.edit_text(response_text, parse_mode='HTML')
            else:
                await update.message.reply_text(response_text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"Error handling photo: {e}")
            await update.message.reply_text(f"Error processing photo: {str(e)}")
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle video messages from admin with auto-detection.
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        try:
            # Get user state
            user_state = self.get_user_state(update.effective_user.id)
            
            # Check if we're in the right step, or allow direct video upload
            if user_state['step'] not in ['content_input', 'photos_upload']:
                # Allow direct video upload - set default values
                user_state['post_mode'] = 'video'  # Video mode
                user_state['target_platform'] = 'all'  # Telegram + VK (Instagram doesn't support video upload via API)
                user_state['check_articles'] = False  # No article check for videos
                user_state['step'] = 'content_input'
                await update.message.reply_text("üìπ –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ! –†–µ–∂–∏–º: –≤–∏–¥–µ–æ, –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: Telegram + VK")
            
            # Auto-detect: video = video post mode
            user_state['post_mode'] = 'video'
            
            # Get video
            video = update.message.video
            file = await context.bot.get_file(video.file_id)
            
            # Download video
            video_path = os.path.join(self.image_processor.uploads_dir, f"temp_{video.file_id}.mp4")
            await file.download_to_drive(video_path)
            
            # Save video path
            user_state['reels_video_path'] = video_path
            user_state['step'] = 'reels_waiting_caption'
            user_state['waiting_for_caption'] = True
            
            # Send confirmation
            await update.message.reply_text(
                "‚úÖ <b>–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!</b>\n\n"
                "üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –≤–∏–¥–µ–æ.",
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"Error handling video: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {str(e)}")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle text messages from admin with auto-detection (captions, Instagram URLs, queue links).
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(update.effective_user.id)
        text = update.message.text.strip()
        
        # Check if we're waiting for link for queue
        if user_state.get('step') == 'waiting_for_link':
            await self.handle_link_input(update, context)
            return
        
        # AUTO-DETECT: Check if this is an Instagram URL when waiting for content
        if user_state.get('step') == 'content_input':
            if 'instagram.com' in text or 'instagr.am' in text:
                # Auto-detect Instagram URL
                if '/reel/' in text:
                    # It's a reels URL
                    logger.info(f"Auto-detected Instagram reels URL: {text}")
                    user_state['post_mode'] = 'reels'
                    user_state['step'] = 'reels_url_input'
                    await self.handle_reels_url_input(update, context)
                    return
                elif '/p/' in text:
                    # It's a post URL
                    logger.info(f"Auto-detected Instagram post URL: {text}")
                    await update.message.reply_text(
                        "üîó <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ Instagram –ø–æ—Å—Ç</b>\n\n"
                        "‚ö†Ô∏è –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞—á–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ—Å—Ç–∞ –≤—Ä—É—á–Ω—É—é –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö —Å—é–¥–∞.",
                        parse_mode='HTML'
                    )
                    return
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ Instagram.\n\n"
                        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
                        "‚Ä¢ /reel/ - —Ä–∏–ª—Å—ã\n"
                        "‚Ä¢ /p/ - –ø–æ—Å—Ç—ã"
                    )
                    return
        
        # Check if we're waiting for reels URL (legacy path)
        if user_state['step'] == 'reels_url_input':
            await self.handle_reels_url_input(update, context)
            return
        
        # Check if we're waiting for caption for reels
        if user_state['post_mode'] == 'reels' and user_state['step'] == 'reels_waiting_caption':
            caption = update.message.text
            if not caption.strip():
                await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å—å.")
                return
            
            # Save caption to user state
            user_state['caption'] = caption
            user_state['step'] = 'caption_entered'
            
            # Ask for scheduling
            platform_text = {
                'telegram': 'Telegram',
                'vk': 'VK',
                'both': 'Telegram –∏ VK',
                'all': 'Telegram –∏ VK'
            }.get(user_state['target_platform'], '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            message = f"""üìã <b>–ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!</b>

<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform_text}
<b>–¢–∏–ø:</b> —Ä–∏–ª—Å
<b>–ü–æ–¥–ø–∏—Å—å:</b> {caption}

<b>–®–∞–≥ 4:</b> –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"""
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=self.get_schedule_keyboard())
            return
        
        # Check if we're waiting for caption
        if not user_state['waiting_for_caption']:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            return
        
        if not user_state['photos']:
            await update.message.reply_text(MESSAGES['no_photos'])
            return
        
        caption = update.message.text
        if not caption.strip():
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å—å.")
            return
        
        # Save caption to user state
        user_state['caption'] = caption
        
        # Update step
        user_state['step'] = 'caption_entered'
        
        # Prepare caption with articles for preview
        article_numbers = user_state.get('article_numbers', [])
        if article_numbers:
            articles_text = self.image_processor.format_articles_for_caption(article_numbers)
            preview_caption = f"{caption}\n\n{articles_text}"
        else:
            preview_caption = caption
        
        # Show preview and ask for scheduling
        try:
            if len(user_state['photos']) == 1:
                with open(user_state['photos'][0], 'rb') as f:
                    preview_msg = await update.message.reply_photo(
                        photo=f,
                        caption=f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:</b>\n\n{preview_caption}",
                        parse_mode='HTML'
                    )
            else:
                media = []
                for i, p in enumerate(user_state['photos']):
                    with open(p, 'rb') as f:
                        media.append(InputMediaPhoto(media=f, caption=f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:</b>\n\n{preview_caption}" if i == 0 else None, parse_mode='HTML'))
                preview_group = await update.message.reply_media_group(media=media)
                preview_msg = preview_group[0] if preview_group else None
            
            # Ask for scheduling
            platform_text = {
                'instagram': 'Instagram',
                'telegram': 'Telegram',
                'vk': 'VK',
                'both': 'Instagram –∏ Telegram',
                'all': 'Instagram, Telegram –∏ VK'
            }.get(user_state['target_platform'], '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # Add article information to preview message
            article_info = ""
            if article_numbers:
                article_info = f"\n<b>–ù–∞–π–¥–µ–Ω–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤:</b> {len(article_numbers)} ({', '.join(article_numbers)})"
            else:
                article_info = "\n<b>–ê—Ä—Ç–∏–∫—É–ª—ã:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            message = f"""üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≥–æ—Ç–æ–≤!</b>

<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform_text}
<b>–¢–∏–ø –ø–æ—Å—Ç–∞:</b> {'–æ–¥–∏–Ω–æ—á–Ω—ã–π' if user_state['post_mode'] == 'single' else '–º–∞—Å—Å–æ–≤—ã–π'}
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ:</b> {len(user_state['photos'])}{article_info}

<b>–®–∞–≥ 4:</b> –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"""
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=self.get_schedule_keyboard())
            
        except Exception as e:
            logger.error(f"Error sending preview: {e}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
            return

    async def handle_publish_now(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle immediate publishing."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(update.effective_user.id)
        if user_state['step'] != 'caption_entered':
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        # Process and publish immediately
        if user_state['post_mode'] == 'reels':
            await self._process_and_publish_reels(update, context, user_state, immediate=True)
        else:
            await self._process_and_publish(update, context, user_state, immediate=True)

    async def handle_ai_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle AI help for caption improvement."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(update.effective_user.id)
        if user_state['step'] != 'caption_entered':
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        # Check if AI service is available
        if not self.ai_service.enabled:
            await update.message.reply_text("‚ùå –ò–ò —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GOOGLE_API_KEY.")
            return
        
        # Check if this is reels mode
        is_reels = user_state.get('post_mode') == 'reels'
        
        # Show processing message
        if is_reels:
            processing_msg = await update.message.reply_text("ü§ñ –ò–ò –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∏–ª—Å–∞ –∏–∑ Instagram...")
        else:
            processing_msg = await update.message.reply_text("ü§ñ –ò–ò –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ...")
        
        # Check if cancelled before AI processing
        if user_state.get('cancelled', False):
            await processing_msg.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return
        
        try:
            if is_reels:
                # For reels: get original caption from Instagram and adapt it
                reels_url = user_state.get('reels_url')
                if not reels_url:
                    await processing_msg.edit_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∏–ª—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                    return
                
                # Get original caption from Instagram
                await processing_msg.edit_text("üîç –ü–æ–ª—É—á–∞—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ Instagram...")
                original_caption = self.instagram_service.get_reels_caption(reels_url)
                
                if not original_caption:
                    # If can't get original caption, use user's caption
                    original_caption = user_state.get('caption', '')
                    if not original_caption:
                        await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∏–ª—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.")
                        return
                    await processing_msg.edit_text(f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ Instagram.\n–ò—Å–ø–æ–ª—å–∑—É—é –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {original_caption}")
                else:
                    await processing_msg.edit_text(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n\n{original_caption[:200]}...\n\nü§ñ –ê–¥–∞–ø—Ç–∏—Ä—É—é –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
                
                # Adapt caption with AI
                adapted_caption = await self.ai_service.adapt_reels_caption(
                    original_caption,
                    user_state['target_platform']
                )
                
                if adapted_caption:
                    # Update caption in user state
                    user_state['caption'] = adapted_caption
                    
                    # Show adapted caption
                    await processing_msg.edit_text(
                        f"ü§ñ <b>–ò–ò –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∏–ª—Å–∞:</b>\n\n"
                        f"<b>–ë—ã–ª–æ (Instagram):</b>\n{original_caption[:150]}{'...' if len(original_caption) > 150 else ''}\n\n"
                        f"<b>–°—Ç–∞–ª–æ (–¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏):</b>\n{adapted_caption}",
                        parse_mode='HTML'
                    )
                    
                    # Ask for scheduling again
                    platform_text = {
                        'telegram': 'Telegram',
                        'vk': 'VK',
                        'both': 'Telegram –∏ VK',
                        'all': 'Telegram –∏ VK'
                    }.get(user_state['target_platform'], '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    
                    message = f"""üìã <b>–ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!</b>

<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform_text}
<b>–¢–∏–ø:</b> —Ä–∏–ª—Å
<b>–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> {adapted_caption}

<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>"""
                    
                    await update.message.reply_text(message, parse_mode='HTML', reply_markup=self.get_schedule_keyboard())
                else:
                    await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            else:
                # For regular posts: improve user's caption
                if not user_state.get('caption'):
                    await update.message.reply_text("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                    return
                
                # Get article numbers from user state
                article_numbers = user_state.get('article_numbers', [])
                
                # Prepare caption for AI improvement (only the description part, not articles)
                caption_for_ai = user_state['caption']
                
                # Get improved caption
                improved_caption = await self.ai_service.improve_caption(
                    caption_for_ai, 
                    user_state['target_platform']
                )
                
                # Check if cancelled after AI processing
                if user_state.get('cancelled', False):
                    await processing_msg.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    return
                
                if improved_caption:
                    # Update caption in user state (only the description part)
                    user_state['caption'] = improved_caption
                    
                    # Show improved caption
                    await processing_msg.edit_text(
                        f"ü§ñ <b>–ò–ò —É–ª—É—á—à–∏–ª –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n{improved_caption}",
                        parse_mode='HTML'
                    )
                    
                    # Show preview with improved caption (articles will be added automatically)
                    await self._show_preview_with_caption(update, context, user_state, improved_caption)
                else:
                    await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                
        except Exception as e:
            logger.error(f"Error in AI help: {e}")
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò: {e}")

    async def handle_schedule_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle post scheduling."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(update.effective_user.id)
        if user_state['step'] != 'caption_entered':
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        # Ask for time input
        user_state['step'] = 'scheduling'
        await update.message.reply_text(
            "‚è∞ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ <code>HH:MM</code> - —Å–µ–≥–æ–¥–Ω—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
            "‚Ä¢ <code>DD.MM HH:MM</code> - –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n"
            "‚Ä¢ <code>+N</code> - —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>15:30</code> - —Å–µ–≥–æ–¥–Ω—è –≤ 15:30\n"
            "‚Ä¢ <code>25.12 10:00</code> - 25 –¥–µ–∫–∞–±—Ä—è –≤ 10:00\n"
            "‚Ä¢ <code>+30</code> - —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç",
            parse_mode='HTML'
        )

    async def handle_time_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle time input for scheduling."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(update.effective_user.id)
        if user_state['step'] != 'scheduling':
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥.")
            return
        
        time_input = update.message.text.strip()
        scheduled_time = None
        
        try:
            now = datetime.now()
            
            if time_input.startswith('+'):
                # Relative time (e.g., +30)
                minutes = int(time_input[1:])
                scheduled_time = now + timedelta(minutes=minutes)
            elif '.' in time_input:
                # Date and time (e.g., 25.12 10:00)
                date_part, time_part = time_input.split()
                day, month = map(int, date_part.split('.'))
                hour, minute = map(int, time_part.split(':'))
                scheduled_time = now.replace(month=month, day=day, hour=hour, minute=minute, second=0, microsecond=0)
            else:
                # Time only (e.g., 15:30)
                hour, minute = map(int, time_input.split(':'))
                scheduled_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
                # If time has passed today, schedule for tomorrow
                if scheduled_time <= now:
                    scheduled_time += timedelta(days=1)
            
            if scheduled_time <= now:
                await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
                return
            
            user_state['scheduled_time'] = scheduled_time
            user_state['step'] = 'scheduled'
            
            # Show confirmation with cancel button
            time_str = scheduled_time.strftime("%d.%m.%Y –≤ %H:%M")
            keyboard = [
                [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")],
            ]
            cancel_keyboard = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"‚è∞ <b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {time_str}</b>\n\n"
                f"–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. "
                f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /cancel",
                parse_mode='HTML',
                reply_markup=cancel_keyboard
            )
            
            # Schedule the post
            await self._schedule_post(update, context, user_state, scheduled_time)
            
        except Exception as e:
            logger.error(f"Error parsing time: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ <code>HH:MM</code> - —Å–µ–≥–æ–¥–Ω—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
                "‚Ä¢ <code>DD.MM HH:MM</code> - –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n"
                "‚Ä¢ <code>+N</code> - —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç",
                parse_mode='HTML'
            )

    async def _schedule_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_state: Dict, scheduled_time: datetime) -> None:
        """Schedule a post for later publishing."""
        try:
            # Calculate delay
            delay = (scheduled_time - datetime.now()).total_seconds()
            
            if delay <= 0:
                await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
                return
            
            # Create task
            task = asyncio.create_task(self._delayed_publish(update, context, user_state, delay))
            
            # Store scheduled post
            self.scheduled_posts[update.effective_user.id] = {
                'task': task,
                'post_data': {
                    'photos': list(user_state['photos']),
                    'caption': user_state.get('caption', ''),
                    'target_platform': user_state['target_platform'],
                    'scheduled_time': scheduled_time
                }
            }
            
            logger.info(f"Post scheduled for {scheduled_time} (delay: {delay}s)")
            
        except Exception as e:
            logger.error(f"Error scheduling post: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    async def _delayed_publish(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_state: Dict, delay: float) -> None:
        """Delayed publishing function."""
        try:
            # Wait for the scheduled time
            await asyncio.sleep(delay)
            
            # Check if cancelled before publishing
            if user_state.get('cancelled', False):
                logger.info("Scheduled post was cancelled before publishing")
                return
            
            # Process and publish
            await self._process_and_publish(update, context, user_state, immediate=False)
            
        except asyncio.CancelledError:
            logger.info("Scheduled post was cancelled")
        except Exception as e:
            logger.error(f"Error in delayed publish: {e}")
            # Try to notify user about the error
            try:
                await self.telegram_service.send_error_notification(
                    update.effective_user.id, 
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {e}"
                )
            except Exception:
                pass

    async def _process_and_publish(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_state: Dict, immediate: bool = True) -> None:
        """Process photos and publish to selected platforms."""
        try:
            # Get caption from user state or pending posts
            caption = user_state.get('caption', '')
            if not caption and update.effective_user.id in self.pending_posts:
                caption = self.pending_posts[update.effective_user.id]['caption']
            
            if not caption:
                await update.message.reply_text("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
            
            # Show processing message
            processing_msg = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏ –ø—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç...")
            
            # Check if cancelled before processing
            if user_state.get('cancelled', False):
                await processing_msg.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return
            
            # Get article numbers from user state (already found during photo upload)
            article_numbers = user_state.get('article_numbers', [])
            
            # Process photos
            processing_msg = await processing_msg.edit_text("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")
            
            # Check if cancelled before photo processing
            if user_state.get('cancelled', False):
                await processing_msg.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return
            
            processed_photos = self.image_processor.process_photos(user_state['photos'])
            target_size = self.image_processor.determine_image_format(processed_photos)
            final_photos = [self.image_processor.resize_image(p, target_size) for p in processed_photos]
            
            # Check if cancelled after photo processing
            if user_state.get('cancelled', False):
                await processing_msg.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                # Cleanup processed photos
                self.image_processor.cleanup_files(final_photos)
                return
            
            # Add article numbers to caption
            if article_numbers:
                articles_text = self.image_processor.format_articles_for_caption(article_numbers)
                enhanced_caption = f"{caption}\n\n{articles_text}"
                logger.info(f"Enhanced caption with articles: {enhanced_caption}")
            else:
                enhanced_caption = caption
                # Only warn if user expected articles (check_articles=True) but none were found
                if user_state.get('check_articles', False):
                    logger.warning("No article numbers found despite check_articles=True, using original caption")
                else:
                    logger.info("Using original caption without article numbers (check_articles=False)")
            
            # Check if cancelled before publishing
            if user_state.get('cancelled', False):
                await processing_msg.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                # Cleanup processed photos
                self.image_processor.cleanup_files(final_photos)
                return
            
            # Publish to selected platforms
            instagram_success = False
            telegram_success = False
            vk_success = False
            
            if user_state['target_platform'] in ['instagram', 'both', 'all']:
                # Check if cancelled before Instagram publishing
                if user_state.get('cancelled', False):
                    await processing_msg.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    self.image_processor.cleanup_files(final_photos)
                    return
                instagram_success = self.instagram_service.create_draft_with_music_instructions(final_photos, enhanced_caption)
            
            if user_state['target_platform'] in ['telegram', 'both', 'all']:
                # Check if cancelled before Telegram publishing
                if user_state.get('cancelled', False):
                    await processing_msg.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    self.image_processor.cleanup_files(final_photos)
                    return
                telegram_success = await self.telegram_service.post_to_telegram(final_photos, enhanced_caption)
            
            if user_state['target_platform'] in ['vk', 'all']:
                # Check if cancelled before VK publishing
                if user_state.get('cancelled', False):
                    await processing_msg.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    self.image_processor.cleanup_files(final_photos)
                    return
                vk_success = await self.vk_service.post_to_vk(final_photos, enhanced_caption)
            
            # Send results
            if immediate:
                article_info = f"\n\nüìã –ù–∞–π–¥–µ–Ω–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {len(article_numbers)}" if article_numbers else "\n\nüìã –ê—Ä—Ç–∏–∫—É–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                
                # Build success message based on which platforms succeeded
                success_platforms = []
                if instagram_success:
                    success_platforms.append('Instagram')
                if telegram_success:
                    success_platforms.append('Telegram')
                if vk_success:
                    success_platforms.append('VK')
                
                if success_platforms:
                    platforms_text = ', '.join(success_platforms)
                    message = f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {platforms_text}!{article_info}"
                    if instagram_success:
                        message += "\n\nüéµ –í–ê–ñ–ù–û: –ó–∞–π–¥–∏—Ç–µ –≤ Instagram –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ–¥–Ω—é—é –º—É–∑—ã–∫—É –∫ –ø–æ—Å—Ç—É!"
                    await processing_msg.edit_text(message)
                else:
                    await processing_msg.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.{article_info}")
            else:
                # Scheduled post results
                success_platforms = []
                if instagram_success:
                    success_platforms.append('Instagram')
                if telegram_success:
                    success_platforms.append('Telegram')
                if vk_success:
                    success_platforms.append('VK')
                
                if success_platforms:
                    platforms_text = ', '.join(success_platforms)
                    message = f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {platforms_text}!"
                    if instagram_success:
                        message += "\n\nüéµ –í–ê–ñ–ù–û: –ó–∞–π–¥–∏—Ç–µ –≤ Instagram –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ–¥–Ω—é—é –º—É–∑—ã–∫—É –∫ –ø–æ—Å—Ç—É!"
                    await self.telegram_service.send_notification(update.effective_user.id, message)
                else:
                    await self.telegram_service.send_error_notification(update.effective_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç")
            
            # Cleanup
            self.image_processor.cleanup_files(final_photos)
            self.clear_user_state(update.effective_user.id)
            
            # Remove from scheduled posts
            if update.effective_user.id in self.scheduled_posts:
                del self.scheduled_posts[update.effective_user.id]
            
        except Exception as e:
            logger.error(f"Error processing and publishing: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            self.clear_user_state(update.effective_user.id)

    async def _show_preview_with_caption(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_state: Dict, caption: str) -> None:
        """Show preview with given caption and ask for scheduling."""
        try:
            # Prepare full caption with articles for preview
            article_numbers = user_state.get('article_numbers', [])
            if article_numbers:
                articles_text = self.image_processor.format_articles_for_caption(article_numbers)
                full_caption = f"{caption}\n\n{articles_text}"
            else:
                full_caption = caption
            
            if len(user_state['photos']) == 1:
                with open(user_state['photos'][0], 'rb') as f:
                    preview_msg = await update.message.reply_photo(
                        photo=f,
                        caption=f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:</b>\n\n{full_caption}",
                        parse_mode='HTML'
                    )
            else:
                media = []
                for i, p in enumerate(user_state['photos']):
                    with open(p, 'rb') as f:
                        media.append(InputMediaPhoto(media=f, caption=f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:</b>\n\n{full_caption}" if i == 0 else None, parse_mode='HTML'))
                preview_group = await update.message.reply_media_group(media=media)
                preview_msg = preview_group[0] if preview_group else None
            
            # Ask for scheduling
            platform_text = {
                'instagram': 'Instagram',
                'telegram': 'Telegram',
                'vk': 'VK',
                'both': 'Instagram –∏ Telegram',
                'all': 'Instagram, Telegram –∏ VK'
            }.get(user_state['target_platform'], '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # Add article information to preview message
            article_numbers = user_state.get('article_numbers', [])
            article_info = ""
            if article_numbers:
                article_info = f"\n<b>–ù–∞–π–¥–µ–Ω–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤:</b> {len(article_numbers)} ({', '.join(article_numbers)})"
            else:
                article_info = "\n<b>–ê—Ä—Ç–∏–∫—É–ª—ã:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            message = f"""üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≥–æ—Ç–æ–≤!</b>

<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform_text}
<b>–¢–∏–ø –ø–æ—Å—Ç–∞:</b> {'–æ–¥–∏–Ω–æ—á–Ω—ã–π' if user_state['post_mode'] == 'single' else '–º–∞—Å—Å–æ–≤—ã–π'}
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ:</b> {len(user_state['photos'])}{article_info}

<b>–®–∞–≥ 4:</b> –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"""
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=self.get_schedule_keyboard())
            
        except Exception as e:
            logger.error(f"Error showing preview: {e}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–≤—å—é: {e}")

    async def on_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle approve/reject/cancel callbacks."""
        if not update.callback_query:
            return
        cq = update.callback_query
        await cq.answer()
        user_id = cq.from_user.id
        if not self.is_admin(user_id):
            await cq.edit_message_text(MESSAGES['unauthorized'])
            return
        
        # Handle cancel download callback
        if cq.data == 'cancel_download':
            await self.handle_cancel_download(update, context)
            return
        
        pending = self.pending_posts.get(user_id)
        if not pending:
            await cq.edit_message_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π.")
            return
        if cq.data == 'reject':
            # Cleanup
            self.image_processor.cleanup_files(pending['photos'])
            self.pending_posts.pop(user_id, None)
            self.clear_user_state(user_id)
            await cq.edit_message_text("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return
        if cq.data == 'approve':
            # Proceed to processing and posting
            photos = pending['photos']
            caption = pending['caption']
            target_platform = pending.get('target_platform', 'both')
            try:
                processed_photos = self.image_processor.process_photos(photos)
                target_size = self.image_processor.determine_image_format(processed_photos)
                final_photos = [self.image_processor.resize_image(p, target_size) for p in processed_photos]
                ig_ok = False
                tg_ok = False
                vk_ok = False
                if target_platform in ('instagram', 'both', 'all'):
                    ig_ok = self.instagram_service.post_to_instagram(final_photos, caption)
                if target_platform in ('telegram', 'both', 'all'):
                    tg_ok = await self.telegram_service.post_to_telegram(final_photos, caption)
                if target_platform in ('vk', 'all'):
                    vk_ok = await self.vk_service.post_to_vk(final_photos, caption)
                
                # Build success message
                success_platforms = []
                if ig_ok:
                    success_platforms.append('Instagram')
                if tg_ok:
                    success_platforms.append('Telegram')
                if vk_ok:
                    success_platforms.append('VK')
                
                if success_platforms:
                    platforms_text = ', '.join(success_platforms)
                    await cq.edit_message_text(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ {platforms_text}!")
                else:
                    await cq.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.")
            except Exception as e:
                logger.error(f"Error during approve flow: {e}")
                await cq.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            finally:
                try:
                    self.image_processor.cleanup_files(final_photos if 'final_photos' in locals() else photos)
                except Exception:
                    pass
                self.pending_posts.pop(user_id, None)
                self.clear_user_state(user_id)
    
    async def handle_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle cancel command from admin.
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_id = update.effective_user.id
        
        # Cancel scheduled posts if any
        if user_id in self.scheduled_posts:
            try:
                self.scheduled_posts[user_id]['task'].cancel()
                del self.scheduled_posts[user_id]
                await update.message.reply_text(MESSAGES['cancelled_scheduled'])
            except Exception as e:
                logger.error(f"Error cancelling scheduled post: {e}")
        
        # Clear user state
        self.clear_user_state(user_id)
        await update.message.reply_text(MESSAGES['cancelled'], reply_markup=self.get_main_keyboard())
    
    async def handle_cancel_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle cancel button from any stage of the process.
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        
        # Get current step for logging
        current_step = user_state.get('step', 'start')
        logger.info(f"User {user_id} cancelled operation at step: {current_step}")
        
        # Cancel scheduled posts if any
        if user_id in self.scheduled_posts:
            try:
                self.scheduled_posts[user_id]['task'].cancel()
                del self.scheduled_posts[user_id]
                await update.message.reply_text(MESSAGES['cancelled_scheduled'])
            except Exception as e:
                logger.error(f"Error cancelling scheduled post: {e}")
        
        # Set cancelled flag before clearing state
        user_state['cancelled'] = True
        
        # Clear user state and cleanup files
        self.clear_user_state(user_id)
        
        # Send cancellation message based on current step
        step_messages = {
            'start': "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            'type_selection': "‚ùå –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
            'platform_selection': "‚ùå –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ—Ç–º–µ–Ω–µ–Ω.",
            'article_check_selection': "‚ùå –í—ã–±–æ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω.",
            'photos_upload': "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            'photos_uploaded': "‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            'caption_entered': "‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            'preview_shown': "‚ùå –ü—Ä–µ–≤—å—é –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            'scheduling': "‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            'scheduled': "‚ùå –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        }
        
        # Get additional info for scheduled posts
        additional_info = ""
        if current_step == 'scheduled' and user_id in self.scheduled_posts:
            scheduled_time = self.scheduled_posts[user_id]['post_data']['scheduled_time']
            additional_info = f"\n\n‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {scheduled_time.strftime('%d.%m.%Y –≤ %H:%M')}"
        
        cancel_message = step_messages.get(current_step, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await update.message.reply_text(
            f"{cancel_message}{additional_info}\n\n{MESSAGES['cancelled']}", 
            reply_markup=self.get_main_keyboard()
        )
    
    async def handle_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle status command from admin.
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        try:
            # Check Instagram status
            instagram_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ" if self.instagram_service.is_logged_in() else "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            
            # Check Telegram status
            telegram_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ" if await self.telegram_service.test_connection() else "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            
            # Check VK status
            vk_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ" if self.vk_service.test_connection() else "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            
            # Check AI service status
            ai_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ" if self.ai_service.enabled and await self.ai_service.test_connection() else "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            
            # Get user state
            user_state = self.get_user_state(update.effective_user.id)
            step_names = {
                'start': '–ù–∞—á–∞–ª–æ',
                'type_selection': '–í—ã–±–æ—Ä —Ç–∏–ø–∞',
                'platform_selection': '–í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
                'article_check_selection': '–í—ã–±–æ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤',
                'photos_upload': '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ',
                'photos_uploaded': '–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                'caption_entered': '–ü–æ–¥–ø–∏—Å—å –≤–≤–µ–¥–µ–Ω–∞',
                'preview_shown': '–ü—Ä–µ–≤—å—é –ø–æ–∫–∞–∑–∞–Ω–æ',
                'scheduling': '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'scheduled': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'
            }
            
            state_info = (
                f"–®–∞–≥: {step_names.get(user_state.get('step', 'start'), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}, "
                f"–§–æ—Ç–æ: {len(user_state['photos'])}, "
                f"–†–µ–∂–∏–º: {user_state.get('post_mode','auto')}, "
                f"–¶–µ–ª—å: {user_state.get('target_platform','both')}, "
                f"–ê—Ä—Ç–∏–∫—É–ª—ã: {'–≤–∫–ª—é—á–µ–Ω' if user_state.get('check_articles', True) else '–æ—Ç–∫–ª—é—á–µ–Ω'}"
            )
            
            # Check for scheduled posts
            scheduled_info = ""
            if update.effective_user.id in self.scheduled_posts:
                scheduled_time = self.scheduled_posts[update.effective_user.id]['post_data']['scheduled_time']
                scheduled_info = f"\n‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è:</b> {scheduled_time.strftime('%d.%m.%Y –≤ %H:%M')}"
            
            status_message = f"""ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

üì∏ <b>Instagram:</b> {instagram_status}
üí¨ <b>Telegram:</b> {telegram_status}
üîµ <b>VK:</b> {vk_status}
ü§ñ <b>–ò–ò —Å–µ—Ä–≤–∏—Å:</b> {ai_status}

üë§ <b>–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {state_info}{scheduled_info}

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/cancel - –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
/reset - —Å–±—Ä–æ—Å–∏—Ç—å Instagram —Å–µ—Å—Å–∏—é"""
            
            # Create keyboard with reset button
            keyboard = [
                [KeyboardButton("üîÑ Reset Instagram"), KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é")],
                [KeyboardButton("‚úÖ Status"), KeyboardButton("‚ùå Cancel")],
                [KeyboardButton("‚ÑπÔ∏è Help")],
            ]
            status_keyboard = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(status_message, parse_mode='HTML', reply_markup=status_keyboard)
            
        except Exception as e:
            logger.error(f"Error getting status: {e}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
    
    async def handle_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle help command from admin.
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        help_message = """ü§ñ <b>–ü–æ–º–æ—â—å - –ê–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä —Å —É–º–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º</b>

<b>üìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è:</b>
1. ‚ûï –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"
2. üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç/—Ä–∏–ª—Å –∏–∑ Instagram
3. ‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å
4. ‚è∞ –ë—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è

<b>üöÄ –†—É—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è (–£–ü–†–û–©–Å–ù–ù–ê–Ø!):</b>
1. üöÄ –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é"
2. üì± –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (Instagram/Telegram/VK/–í—Å–µ)
3. üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ (–î–∞/–ù–µ—Ç)
4. üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –õ–Æ–ë–û–ô –∫–æ–Ω—Ç–µ–Ω—Ç:
   ‚Ä¢ üì∑ –§–æ—Ç–æ (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
   ‚Ä¢ üìπ –í–∏–¥–µ–æ —Ñ–∞–π–ª
   ‚Ä¢ üîó –°—Å—ã–ª–∫—É –Ω–∞ Instagram —Ä–∏–ª—Å
5. üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É
6. ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ü–æ–º–æ—â—å –ò–ò" –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
7. ‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è (—Å–µ–π—á–∞—Å/–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å)

<b>‚ú® –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞:</b>
–ë–æ—Ç —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏:
‚Ä¢ –§–æ—Ç–æ ‚Üí –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
‚Ä¢ –í–∏–¥–µ–æ ‚Üí –≤–∏–¥–µ–æ –ø–æ—Å—Ç
‚Ä¢ –°—Å—ã–ª–∫–∞ /reel/ ‚Üí —Å–∫–∞—á–∞–µ—Ç —Ä–∏–ª—Å
–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å —Ç–∏–ø!

<b>‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:</b>
–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—ã: 8, 10, 12, 14, 16, 18, 20, 22
–†–∞–∑ –≤ 2 —á–∞—Å–∞ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –æ–¥–∏–Ω –ø–æ—Å—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏

<b>üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é:</b>
/add_link ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É
/queue ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å
üìã –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤ ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä
üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
‚ùå –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ

<b>üõ†Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start ‚Äî –∑–∞–ø—É—Å–∫
/help ‚Äî –ø–æ–º–æ—â—å
/status ‚Äî —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/cancel ‚Äî –æ—Ç–º–µ–Ω–∞
/reset ‚Äî —Å–±—Ä–æ—Å Instagram —Å–µ—Å—Å–∏–∏

<b>üìù –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤:</b>
‚Ä¢ <code>HH:MM</code> - —Å–µ–≥–æ–¥–Ω—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ <code>DD.MM HH:MM</code> - –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
‚Ä¢ <code>+N</code> - —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç

<b>ü§ñ –ò–ò –ø–æ–º–æ—â—å:</b>
‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
‚Ä¢ –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∏ —Ö–µ—à—Ç–µ–≥–∏
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –ø–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
‚Ä¢ –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GOOGLE_API_KEY

<b>üìå –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b>
‚Ä¢ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –û—á–µ—Ä–µ–¥—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
‚Ä¢ –§–æ—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ä–∏–ª—Å–æ–≤
‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ: —Å–º. SCHEDULER_GUIDE.md"""
        
        await update.message.reply_text(help_message, parse_mode='HTML', reply_markup=self.get_main_keyboard())

    async def handle_type_single(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle single post type selection."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(update.effective_user.id)
        if user_state['step'] != 'type_selection':
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        user_state['post_mode'] = 'single'
        user_state['step'] = 'platform_selection'
        
        message = """üì∑ <b>–û–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ—Å—Ç –≤—ã–±—Ä–∞–Ω</b>

<b>–®–∞–≥ 2:</b> –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:

üì∑ <b>Instagram</b> - —Ç–æ–ª—å–∫–æ Instagram
üí¨ <b>Telegram</b> - —Ç–æ–ª—å–∫–æ Telegram –≥—Ä—É–ø–ø–∞  
üîÄ <b>–û–±–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</b> - Instagram + Telegram"""
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=self.get_platform_selection_keyboard())

    async def handle_type_multi(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle multi post type selection."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(update.effective_user.id)
        if user_state['step'] != 'type_selection':
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        user_state['post_mode'] = 'multi'
        user_state['step'] = 'platform_selection'
        
        message = """üì∏ <b>–ú–∞—Å—Å–æ–≤—ã–π –ø–æ—Å—Ç –≤—ã–±—Ä–∞–Ω</b>

<b>–®–∞–≥ 2:</b> –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:

üì∑ <b>Instagram</b> - —Ç–æ–ª—å–∫–æ Instagram
üí¨ <b>Telegram</b> - —Ç–æ–ª—å–∫–æ Telegram –≥—Ä—É–ø–ø–∞  
üîÄ <b>–û–±–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</b> - Instagram + Telegram"""
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=self.get_platform_selection_keyboard())

    async def handle_mode_single(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Switch to single-post mode (only one photo)."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        state = self.get_user_state(update.effective_user.id)
        state['post_mode'] = 'single'
        # If there are more than one photo collected, keep only the last one
        if len(state['photos']) > 1:
            self.image_processor.cleanup_files(state['photos'][:-1])
            state['photos'] = state['photos'][-1:]
        await update.message.reply_text("–†–µ–∂–∏–º: –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ—Å—Ç. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")

    async def handle_mode_multi(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Switch to multi-post mode (allow multiple photos)."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        state = self.get_user_state(update.effective_user.id)
        state['post_mode'] = 'multi'
        await update.message.reply_text("–†–µ–∂–∏–º: –º–∞—Å—Å–æ–≤—ã–π –ø–æ—Å—Ç. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 2‚Äì10 —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –ø–æ–¥–ø–∏—Å—å—é.")
    
    async def handle_start_publication(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle start publication process with auto-detection.
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        # Clear any existing state
        self.clear_user_state(update.effective_user.id)
        
        # Start the business process - go straight to platform selection
        user_state = self.get_user_state(update.effective_user.id)
        user_state['step'] = 'platform_selection'
        user_state['post_mode'] = 'auto'  # Auto-detect mode
        
        message = """üöÄ <b>–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>

<b>–®–∞–≥ 1:</b> –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:

üì∑ <b>Instagram</b> - —Ç–æ–ª—å–∫–æ Instagram
üí¨ <b>Telegram</b> - —Ç–æ–ª—å–∫–æ Telegram –≥—Ä—É–ø–ø–∞
üîµ <b>VK</b> - —Ç–æ–ª—å–∫–æ VK –≥—Ä—É–ø–ø–∞
üîÄ <b>–í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</b> - Instagram + Telegram + VK

<i>üí° –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:</i>
‚Ä¢ –§–æ—Ç–æ (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
‚Ä¢ –í–∏–¥–µ–æ
‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ Instagram –ø–æ—Å—Ç/—Ä–∏–ª—Å

<i>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞!</i>"""
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=self.get_platform_selection_keyboard())

    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle start command from admin.
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        await update.message.reply_text(MESSAGES['welcome'], reply_markup=self.get_main_keyboard())

    # Button handlers (map buttons to existing commands)
    async def handle_btn_single(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await self.handle_mode_single(update, context)

    async def handle_btn_multi(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await self.handle_mode_multi(update, context)

    async def handle_btn_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await self.handle_status(update, context)

    async def handle_btn_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await self.handle_cancel(update, context)

    async def handle_btn_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await self.handle_help(update, context)
    
    async def handle_reset_instagram(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle Instagram session reset.
        Removes old session and creates a new one.
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        try:
            processing_msg = await update.message.reply_text(
                "üîÑ <b>–°–±—Ä–∞—Å—ã–≤–∞—é Instagram —Å–µ—Å—Å–∏—é...</b>\n\n"
                "–®–∞–≥ 1/3: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Å–µ—Å—Å–∏–∏...",
                parse_mode='HTML'
            )
            
            # Use the new reset_session method from InstagramService
            import asyncio
            
            # Update message
            await processing_msg.edit_text(
                "üîÑ <b>–°–±—Ä–∞—Å—ã–≤–∞—é Instagram —Å–µ—Å—Å–∏—é...</b>\n\n"
                "‚úÖ –®–∞–≥ 1/3: –°—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞\n"
                "‚è≥ –®–∞–≥ 2/3: –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞...",
                parse_mode='HTML'
            )
            
            # Small delay to show progress
            await asyncio.sleep(0.5)
            
            # Update message
            await processing_msg.edit_text(
                "üîÑ <b>–°–±—Ä–∞—Å—ã–≤–∞—é Instagram —Å–µ—Å—Å–∏—é...</b>\n\n"
                "‚úÖ –®–∞–≥ 1/3: –°—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞\n"
                "‚úÖ –®–∞–≥ 2/3: –ö–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω\n"
                "‚è≥ –®–∞–≥ 3/3: –ù–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...",
                parse_mode='HTML'
            )
            
            # Reset session using the service method
            reset_success = self.instagram_service.reset_session()
            
            if reset_success:
                # Verify login
                if self.instagram_service.is_logged_in():
                    await processing_msg.edit_text(
                        "‚úÖ <b>Instagram —Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                        "‚úÖ –®–∞–≥ 1/3: –°—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞\n"
                        "‚úÖ –®–∞–≥ 2/3: –ö–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω\n"
                        "‚úÖ –®–∞–≥ 3/3: –ù–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n"
                        "üì∏ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–¥–∫–ª—é—á–µ–Ω–æ\n"
                        "üîê <b>–°–µ—Å—Å–∏—è:</b> –°–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ\n"
                        "üìÅ <b>–§–∞–π–ª:</b> session.json –æ–±–Ω–æ–≤–ª–µ–Ω\n\n"
                        "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏! üéâ",
                        parse_mode='HTML'
                    )
                    logger.info("Instagram session reset successful")
                else:
                    await processing_msg.edit_text(
                        "‚ö†Ô∏è <b>–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Å–µ—Å—Å–∏—è –Ω–µ –≤–∞–ª–∏–¥–Ω–∞</b>\n\n"
                        "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                        "‚Ä¢ Instagram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n"
                        "‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
                        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n\n"
                        "<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
                        "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ\n"
                        "2. –í–æ–π–¥–∏—Ç–µ –≤ Instagram –≤—Ä—É—á–Ω—É—é –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n"
                        "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /reset –µ—â–µ —Ä–∞–∑",
                        parse_mode='HTML'
                    )
            else:
                await processing_msg.edit_text(
                    "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (USERNAME/PASSWORD)\n"
                    "‚Ä¢ Instagram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (SMS/Email)\n"
                    "‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n"
                    "‚Ä¢ Instagram API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
                    "<b>–†–µ—à–µ–Ω–∏—è:</b>\n"
                    "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ INSTAGRAM_USERNAME –∏ INSTAGRAM_PASSWORD –≤ .env\n"
                    "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ INSTAGRAM_SESSIONID –≤–º–µ—Å—Ç–æ –ø–∞—Ä–æ–ª—è\n"
                    "3. –í–æ–π–¥–∏—Ç–µ –≤ Instagram –≤—Ä—É—á–Ω—É—é –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É\n"
                    "4. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\n"
                    "üìö –ü–æ–¥—Ä–æ–±–Ω–µ–µ: —Å–º. INSTAGRAM_403_FIX.md",
                    parse_mode='HTML'
                )
                logger.error("Instagram session reset failed - login unsuccessful")
                
        except Exception as e:
            logger.error(f"Error resetting Instagram session: {e}")
            await update.message.reply_text(
                f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–µ—Å—Å–∏–∏:</b>\n\n"
                f"<code>{str(e)}</code>\n\n"
                "<b>–†–µ—à–µ–Ω–∏–µ:</b>\n"
                "1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É—é (Ctrl+C ‚Üí python main.py)\n"
                "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π\n"
                "3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª sessions/session.json –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏",
                parse_mode='HTML'
            )

    async def handle_platform_instagram(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle Instagram platform selection."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(update.effective_user.id)
        if user_state['step'] != 'platform_selection':
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        user_state['target_platform'] = 'instagram'
        user_state['step'] = 'article_check_selection'
        
        message = """üì∑ <b>Instagram –≤—ã–±—Ä–∞–Ω</b>

<b>–®–∞–≥ 2:</b> –ù—É–∂–Ω–æ –ª–∏ –∏—Å–∫–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö?

üîç <b>–î–∞, –∏—Å–∫–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã</b> - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –¥–æ–±–∞–≤–∏—Ç –∏—Ö –≤ –ø–æ—Å—Ç
‚è≠Ô∏è <b>–ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b> - –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤

<i>üí° –ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:</i>
‚Ä¢ –§–æ—Ç–æ (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ 10)
‚Ä¢ –í–∏–¥–µ–æ —Ñ–∞–π–ª
‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ Instagram –ø–æ—Å—Ç/—Ä–∏–ª—Å"""
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=self.get_article_check_keyboard())

    async def handle_platform_telegram(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle Telegram platform selection."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(update.effective_user.id)
        if user_state['step'] != 'platform_selection':
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        user_state['target_platform'] = 'telegram'
        user_state['step'] = 'article_check_selection'
        
        message = """üí¨ <b>Telegram –≤—ã–±—Ä–∞–Ω</b>

<b>–®–∞–≥ 2:</b> –ù—É–∂–Ω–æ –ª–∏ –∏—Å–∫–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö?

üîç <b>–î–∞, –∏—Å–∫–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã</b> - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –¥–æ–±–∞–≤–∏—Ç –∏—Ö –≤ –ø–æ—Å—Ç
‚è≠Ô∏è <b>–ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b> - –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤

<i>üí° –ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:</i>
‚Ä¢ –§–æ—Ç–æ (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ 10)
‚Ä¢ –í–∏–¥–µ–æ —Ñ–∞–π–ª
‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ Instagram –ø–æ—Å—Ç/—Ä–∏–ª—Å"""
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=self.get_article_check_keyboard())

    async def handle_platform_vk(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle VK platform selection."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(update.effective_user.id)
        if user_state['step'] != 'platform_selection':
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        user_state['target_platform'] = 'vk'
        user_state['step'] = 'article_check_selection'
        
        message = """üîµ <b>VK –≤—ã–±—Ä–∞–Ω</b>

<b>–®–∞–≥ 2:</b> –ù—É–∂–Ω–æ –ª–∏ –∏—Å–∫–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö?

üîç <b>–î–∞, –∏—Å–∫–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã</b> - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –¥–æ–±–∞–≤–∏—Ç –∏—Ö –≤ –ø–æ—Å—Ç
‚è≠Ô∏è <b>–ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b> - –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤

<i>üí° –ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:</i>
‚Ä¢ –§–æ—Ç–æ (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ 10)
‚Ä¢ –í–∏–¥–µ–æ —Ñ–∞–π–ª
‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ Instagram –ø–æ—Å—Ç/—Ä–∏–ª—Å"""
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=self.get_article_check_keyboard())

    async def handle_platform_both(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle all platforms selection."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(update.effective_user.id)
        if user_state['step'] != 'platform_selection':
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        user_state['target_platform'] = 'all'
        user_state['step'] = 'article_check_selection'
        
        message = """üîÄ <b>–í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤—ã–±—Ä–∞–Ω—ã</b>

<b>–®–∞–≥ 2:</b> –ù—É–∂–Ω–æ –ª–∏ –∏—Å–∫–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö?

üîç <b>–î–∞, –∏—Å–∫–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã</b> - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –¥–æ–±–∞–≤–∏—Ç –∏—Ö –≤ –ø–æ—Å—Ç
‚è≠Ô∏è <b>–ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b> - –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤

<i>üí° –ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:</i>
‚Ä¢ –§–æ—Ç–æ (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ 10)
‚Ä¢ –í–∏–¥–µ–æ —Ñ–∞–π–ª
‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ Instagram –ø–æ—Å—Ç/—Ä–∏–ª—Å"""
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=self.get_article_check_keyboard())

    async def handle_article_check_yes(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle article check selection - yes."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(update.effective_user.id)
        if user_state['step'] != 'article_check_selection':
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        user_state['check_articles'] = True
        user_state['step'] = 'content_input'
        
        platform_text = {
            'instagram': 'Instagram',
            'telegram': 'Telegram',
            'vk': 'VK',
            'both': 'Instagram –∏ Telegram',
            'all': 'Instagram, Telegram –∏ VK'
        }.get(user_state['target_platform'], '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        message = f"""üîç <b>–ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤–∫–ª—é—á–µ–Ω</b>

<b>–®–∞–≥ 3:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

üì± <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform_text}
üîç <b>–ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤:</b> –≤–∫–ª—é—á–µ–Ω

üì§ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ:</b>
‚Ä¢ üì∑ –§–æ—Ç–æ (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ 10)
‚Ä¢ üìπ –í–∏–¥–µ–æ —Ñ–∞–π–ª
‚Ä¢ üîó –°—Å—ã–ª–∫—É –Ω–∞ Instagram –ø–æ—Å—Ç/—Ä–∏–ª—Å

<i>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞!</i>"""
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=self.get_content_input_keyboard())

    async def handle_article_check_no(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle article check selection - no."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(update.effective_user.id)
        if user_state['step'] != 'article_check_selection':
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        user_state['check_articles'] = False
        user_state['step'] = 'content_input'
        
        platform_text = {
            'instagram': 'Instagram',
            'telegram': 'Telegram',
            'vk': 'VK',
            'both': 'Instagram –∏ Telegram',
            'all': 'Instagram, Telegram –∏ VK'
        }.get(user_state['target_platform'], '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        message = f"""‚è≠Ô∏è <b>–ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω</b>

<b>–®–∞–≥ 3:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

üì± <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform_text}
üîç <b>–ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤:</b> –æ—Ç–∫–ª—é—á–µ–Ω

üì§ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ:</b>
‚Ä¢ üì∑ –§–æ—Ç–æ (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ 10)
‚Ä¢ üìπ –í–∏–¥–µ–æ —Ñ–∞–π–ª
‚Ä¢ üîó –°—Å—ã–ª–∫—É –Ω–∞ Instagram –ø–æ—Å—Ç/—Ä–∏–ª—Å

<i>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞!</i>"""
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=self.get_content_input_keyboard())
    
    async def handle_type_reels(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle reels type selection."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(update.effective_user.id)
        if user_state['step'] != 'type_selection':
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        user_state['post_mode'] = 'reels'
        user_state['step'] = 'platform_selection'
        
        message = """üìπ <b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–∏–ª—Å –≤—ã–±—Ä–∞–Ω–∞</b>

<b>–®–∞–≥ 2:</b> –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:

üì∑ <b>Instagram</b> - –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –≤–∏–¥–µ–æ-–ø–æ—Å—Ç
üí¨ <b>Telegram</b> - —Ç–æ–ª—å–∫–æ Telegram –≥—Ä—É–ø–ø–∞  
üîµ <b>VK</b> - —Ç–æ–ª—å–∫–æ VK –≥—Ä—É–ø–ø–∞
üîÄ <b>–í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</b> - Instagram + Telegram + VK

<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í Instagram –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç, –Ω–µ –∫–∞–∫ reels</i>"""
        
        # Use standard platform keyboard with Instagram option
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=self.get_platform_selection_keyboard())
    
    async def handle_cancel_download(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle download cancellation via callback button."""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        
        # Set cancellation flag
        user_state['cancel_download'] = True
        
        await query.edit_message_text(
            "‚èπÔ∏è <b>–û—Ç–º–µ–Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...</b>\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö.",
            parse_mode='HTML'
        )
    
    async def handle_reels_url_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle reels URL input with progress tracking and cancellation."""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(user_id)
        
        # Check if we're waiting for URL
        if user_state['step'] != 'reels_url_input':
            return  # Not waiting for URL, ignore
        
        # Get URL from message
        reels_url = update.message.text.strip()
        
        # Validate URL
        if not ('instagram.com' in reels_url or 'instagr.am' in reels_url):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∏–ª—Å –∏–∑ Instagram.")
            return
        
        user_state['reels_url'] = reels_url
        user_state['step'] = 'reels_download'
        user_state['cancel_download'] = False  # Reset cancel flag
        
        # Show processing message with cancel button
        cancel_keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚èπÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_download")
        ]])
        
        processing_msg = await update.message.reply_text(
            "‚è≥ <b>–°–∫–∞—á–∏–≤–∞—é —Ä–∏–ª—Å –∏–∑ Instagram...</b>\n\n"
            "üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é...",
            parse_mode='HTML',
            reply_markup=cancel_keyboard
        )
        
        last_update_time = [asyncio.get_event_loop().time()]  # Use list to allow modification in nested function
        
        # Progress callback
        async def progress_callback(downloaded: int, total: int):
            """Update progress message."""
            try:
                current_time = asyncio.get_event_loop().time()
                # Update only every 2 seconds to avoid rate limiting
                if current_time - last_update_time[0] >= 2:
                    downloaded_mb = downloaded / (1024 * 1024)
                    
                    if total > 0:
                        percent = (downloaded / total) * 100
                        total_mb = total / (1024 * 1024)
                        progress_bar = "‚ñà" * int(percent / 5) + "‚ñë" * (20 - int(percent / 5))
                        
                        logger.info(f"Progress update: {percent:.1f}% ({downloaded_mb:.2f}/{total_mb:.2f} MB)")
                        
                        await processing_msg.edit_text(
                            f"‚è≥ <b>–°–∫–∞—á–∏–≤–∞—é —Ä–∏–ª—Å –∏–∑ Instagram...</b>\n\n"
                            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {percent:.1f}%\n"
                            f"[{progress_bar}]\n\n"
                            f"üíæ –°–∫–∞—á–∞–Ω–æ: {downloaded_mb:.2f} –ú–ë / {total_mb:.2f} –ú–ë",
                            parse_mode='HTML',
                            reply_markup=cancel_keyboard
                        )
                    else:
                        # Total size unknown - show only downloaded
                        logger.info(f"Progress update: {downloaded_mb:.2f} MB downloaded (total size unknown)")
                        
                        await processing_msg.edit_text(
                            f"‚è≥ <b>–°–∫–∞—á–∏–≤–∞—é —Ä–∏–ª—Å –∏–∑ Instagram...</b>\n\n"
                            f"üìä –°–∫–∞—á–∏–≤–∞–Ω–∏–µ...\n"
                            f"üíæ –°–∫–∞—á–∞–Ω–æ: {downloaded_mb:.2f} –ú–ë",
                            parse_mode='HTML',
                            reply_markup=cancel_keyboard
                        )
                    
                    last_update_time[0] = current_time
            except Exception as e:
                logger.error(f"Error updating progress UI: {e}")
                import traceback
                logger.error(f"Traceback: {traceback.format_exc()}")
        
        # Cancel check callback
        def cancel_check():
            """Check if download should be cancelled."""
            return user_state.get('cancel_download', False)
        
        # Download video
        video_path = None
        try:
            # Get event loop reference before entering executor
            main_loop = asyncio.get_event_loop()
            
            # Sync wrapper for progress callback (non-blocking)
            def sync_progress_callback(downloaded: int, total: int):
                """Non-blocking wrapper for async progress callback."""
                try:
                    # Use main loop reference (not get_event_loop() which won't work in thread)
                    asyncio.run_coroutine_threadsafe(
                        progress_callback(downloaded, total),
                        main_loop
                    )
                except Exception as e:
                    logger.error(f"Error in sync progress callback wrapper: {e}")
                    import traceback
                    logger.error(f"Traceback: {traceback.format_exc()}")
            
            logger.info(f"Starting reels download from: {reels_url}")
            
            # Download reels with progress and cancel callbacks
            video_path = await main_loop.run_in_executor(
                None,
                lambda: self.instagram_service.download_reels(
                    reels_url,
                    progress_callback=sync_progress_callback,
                    cancel_check=cancel_check
                )
            )
            
            logger.info(f"Download completed, video_path: {video_path}")
            
        except Exception as e:
            logger.error(f"Error downloading reels: {e}")
            await processing_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ä–∏–ª—Å–∞</b>\n\n"
                f"<code>{str(e)}</code>",
                parse_mode='HTML'
            )
            user_state['step'] = 'reels_url_input'
            return
        
        # Check if cancelled
        if user_state.get('cancel_download', False):
            await processing_msg.edit_text(
                "‚ùå <b>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é.",
                parse_mode='HTML'
            )
            user_state['step'] = 'start'
            user_state['cancel_download'] = False
            return
        
        if not video_path:
            await processing_msg.edit_text(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ä–∏–ª—Å</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                parse_mode='HTML'
            )
            user_state['step'] = 'reels_url_input'
            return
        
        # Video downloaded successfully - update state FIRST
        user_state['reels_video_path'] = video_path
        user_state['step'] = 'reels_waiting_caption'
        
        # Show success message
        await processing_msg.edit_text(
            "‚úÖ <b>–†–∏–ª—Å —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä...",
            parse_mode='HTML'
        )
        
        # Send video preview (in separate try-catch to preserve state if this fails)
        try:
            # Check file size (Telegram has 50MB limit for videos)
            file_size = os.path.getsize(video_path)
            file_size_mb = file_size / (1024 * 1024)
            logger.info(f"Video file size: {file_size_mb:.2f} MB")
            
            if file_size_mb > 50:
                logger.warning(f"Video too large for Telegram preview: {file_size_mb:.2f} MB > 50 MB")
                await update.message.reply_text(
                    f"‚ö†Ô∏è <b>–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞</b> ({file_size_mb:.1f} MB)\n\n"
                    "–ù–æ –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ! üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É:",
                    parse_mode='HTML'
                )
            else:
                logger.info(f"Sending video preview to user {user_id}")
                # Use asyncio.wait_for to add overall timeout
                async def send_video():
                    with open(video_path, 'rb') as video:
                        await update.message.reply_video(
                            video=video,
                            caption="<b>‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∏–ª—Å–∞</b>\n\nüìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É:",
                            parse_mode='HTML',
                            read_timeout=180,
                            write_timeout=180,
                            connect_timeout=60
                        )
                
                # Set overall timeout to 5 minutes
                await asyncio.wait_for(send_video(), timeout=300)
                logger.info(f"Video preview sent successfully to user {user_id}")
        except asyncio.TimeoutError:
            logger.error(f"Timeout sending video preview (5 minutes exceeded)")
            await update.message.reply_text(
                "‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞</b>\n\n"
                "–ù–æ –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ! üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É:",
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"Error sending video preview: {e}", exc_info=True)
            # Video is downloaded, state is set, just notify user without preview
            await update.message.reply_text(
                "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</b>\n\n"
                "–ù–æ –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ! üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É:",
                parse_mode='HTML'
            )
    
    async def _process_and_publish_reels(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_state: Dict, immediate: bool = True) -> None:
        """Process and publish reels to selected platforms."""
        try:
            # Get caption from user state
            caption = user_state.get('caption', '')
            if not caption:
                await update.message.reply_text("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
            
            video_path = user_state.get('reels_video_path')
            if not video_path:
                await update.message.reply_text("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                return
            
            # Show processing message
            processing_msg = await update.message.reply_text("‚è≥ –ü—É–±–ª–∏–∫—É—é —Ä–∏–ª—Å...")
            
            # Check if cancelled before publishing
            if user_state.get('cancelled', False):
                await processing_msg.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return
            
            # Publish to selected platforms
            instagram_success = False
            telegram_success = False
            vk_success = False
            
            if user_state['target_platform'] in ['instagram', 'both', 'all']:
                # Check if cancelled before Instagram publishing
                if user_state.get('cancelled', False):
                    await processing_msg.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    return
                logger.info("Publishing to Instagram...")
                # Instagram post_video is synchronous, run in executor
                import asyncio
                loop = asyncio.get_event_loop()
                instagram_success = await loop.run_in_executor(
                    None,
                    self.instagram_service.post_video,
                    video_path,
                    caption
                )
                logger.info(f"Instagram publishing result: {instagram_success}")
            
            if user_state['target_platform'] in ['telegram', 'both', 'all']:
                # Check if cancelled before Telegram publishing
                if user_state.get('cancelled', False):
                    await processing_msg.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    return
                logger.info("Publishing to Telegram...")
                telegram_success = await self.telegram_service.post_video(video_path, caption)
                logger.info(f"Telegram publishing result: {telegram_success}")
            
            if user_state['target_platform'] in ['vk', 'all']:
                # Check if cancelled before VK publishing
                if user_state.get('cancelled', False):
                    await processing_msg.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    return
                logger.info("Publishing to VK...")
                vk_success = await self.vk_service.post_video(video_path, caption)
                logger.info(f"VK publishing result: {vk_success}")
            
            # Send results
            if immediate:
                # Build success message based on which platforms succeeded
                success_platforms = []
                if instagram_success:
                    success_platforms.append('Instagram')
                if telegram_success:
                    success_platforms.append('Telegram')
                if vk_success:
                    success_platforms.append('VK')
                
                if success_platforms:
                    platforms_text = ', '.join(success_platforms)
                    message = f"‚úÖ –†–∏–ª—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {platforms_text}!"
                    await processing_msg.edit_text(message)
                else:
                    await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–∏–ª—Å –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.")
            else:
                # Scheduled post results
                success_platforms = []
                if instagram_success:
                    success_platforms.append('Instagram')
                if telegram_success:
                    success_platforms.append('Telegram')
                if vk_success:
                    success_platforms.append('VK')
                
                if success_platforms:
                    platforms_text = ', '.join(success_platforms)
                    message = f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏–ª—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {platforms_text}!"
                    await self.telegram_service.send_notification(update.effective_user.id, message)
                else:
                    await self.telegram_service.send_error_notification(update.effective_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏–ª—Å")
            
            # Cleanup
            if video_path and os.path.exists(video_path):
                os.remove(video_path)
            self.clear_user_state(update.effective_user.id)
            
            # Remove from scheduled posts
            if update.effective_user.id in self.scheduled_posts:
                del self.scheduled_posts[update.effective_user.id]
            
        except Exception as e:
            logger.error(f"Error processing and publishing reels: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–∏–ª—Å–∞: {e}")
            self.clear_user_state(update.effective_user.id)
    
    async def handle_add_link(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle adding a link to the queue.
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(update.effective_user.id)
        
        # Set state to waiting for link
        user_state['step'] = 'waiting_for_link'
        
        message = """‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å</b>

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –∏–ª–∏ —Ä–∏–ª—Å –∏–∑ Instagram

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ https://www.instagram.com/p/ABC123/
‚Ä¢ https://www.instagram.com/reel/ABC123/

–ü–æ—Å—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
        
        await update.message.reply_text(message, parse_mode='HTML')
    
    async def handle_link_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle link input for queue.
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        user_state = self.get_user_state(update.effective_user.id)
        
        # Check if we're waiting for link
        if user_state.get('step') != 'waiting_for_link':
            return
        
        url = update.message.text.strip()
        
        # Validate URL
        if not ('instagram.com' in url or 'instagr.am' in url):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç/—Ä–∏–ª—Å –∏–∑ Instagram.")
            return
        
        # Add to queue
        try:
            post = self.scheduler_service.add_to_queue(url, platform='all')
            
            # Get schedule info
            schedule_info = self.scheduler_service.get_schedule_info()
            
            message = f"""‚úÖ <b>–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å!</b>

üìé <b>URL:</b> {url[:50]}...
üÜî <b>ID:</b> {post.id}
üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> {datetime.fromisoformat(post.added_at).strftime('%d.%m.%Y %H:%M')}

{schedule_info}"""
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=self.get_main_keyboard())
            
            # Clear state
            user_state['step'] = 'start'
            
        except Exception as e:
            logger.error(f"Error adding link to queue: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: {e}")
    
    async def handle_view_queue(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle viewing the post queue.
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        try:
            # Get all posts from queue
            all_posts = self.scheduler_service.get_queue()
            pending_posts = self.scheduler_service.get_pending_posts()
            
            if not all_posts:
                message = """üìã <b>–û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤ –ø—É—Å—Ç–∞</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å."""
                await update.message.reply_text(message, parse_mode='HTML', reply_markup=self.get_main_keyboard())
                return
            
            # Get schedule info
            schedule_info = self.scheduler_service.get_schedule_info()
            
            # Build message with queue details
            message = f"""üìã <b>–û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤</b>

{schedule_info}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>–ü–æ—Å—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏:</b>

"""
            
            # Group posts by status
            statuses = {
                'pending': '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏',
                'processing': 'üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
                'published': '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω',
                'failed': '‚ùå –û—à–∏–±–∫–∞'
            }
            
            for status, status_text in statuses.items():
                posts_with_status = [p for p in all_posts if p.status == status]
                if posts_with_status:
                    message += f"\n<b>{status_text}:</b> {len(posts_with_status)}\n"
                    for post in posts_with_status[:5]:  # Show max 5 per status
                        url_short = post.url[:40] + '...' if len(post.url) > 40 else post.url
                        added = datetime.fromisoformat(post.added_at).strftime('%d.%m %H:%M')
                        message += f"  ‚Ä¢ {url_short}\n    ID: {post.id} | {added}\n"
                    
                    if len(posts_with_status) > 5:
                        message += f"  ... –∏ –µ—â—ë {len(posts_with_status) - 5}\n"
            
            # Add management buttons
            keyboard = [
                [KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ"), KeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ")],
                [KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É")],
                [KeyboardButton("‚úÖ Status"), KeyboardButton("‚ÑπÔ∏è Help")],
            ]
            queue_keyboard = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=queue_keyboard)
            
        except Exception as e:
            logger.error(f"Error viewing queue: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
    
    async def handle_clear_published(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Clear published posts from queue."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        try:
            published_count = len(self.scheduler_service.get_queue(status='published'))
            self.scheduler_service.clear_queue(status='published')
            
            message = f"‚úÖ –û—á–∏—â–µ–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {published_count}"
            await update.message.reply_text(message, reply_markup=self.get_main_keyboard())
            
        except Exception as e:
            logger.error(f"Error clearing published posts: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def handle_clear_all_queue(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Clear entire queue."""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(MESSAGES['unauthorized'])
            return
        
        try:
            total_count = len(self.scheduler_service.get_queue())
            self.scheduler_service.clear_queue()
            
            message = f"‚úÖ –û—á–µ—Ä–µ–¥—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {total_count}"
            await update.message.reply_text(message, reply_markup=self.get_main_keyboard())
            
        except Exception as e:
            logger.error(f"Error clearing queue: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _publish_from_queue(self, post: QueuedPost) -> bool:
        """
        Publish a post from the queue.
        
        Args:
            post: The queued post to publish
            
        Returns:
            True if successful, False otherwise
        """
        try:
            logger.info(f"Publishing from queue: {post.id} - {post.url}")
            
            # Detect if it's a reels or regular post
            is_reels = '/reel/' in post.url
            
            if is_reels:
                # Download and publish reels
                logger.info("Detected reels URL, downloading...")
                video_path = self.instagram_service.download_reels(post.url)
                
                if not video_path:
                    logger.error("Failed to download reels")
                    return False
                
                # Get caption from reels
                caption = self.instagram_service.get_reels_caption(post.url)
                if not caption:
                    caption = "üìπ –ù–æ–≤—ã–π —Ä–∏–ª—Å"
                
                # Publish to platforms
                success = False
                if post.platform in ['instagram', 'all']:
                    success = self.instagram_service.post_video(video_path, caption) or success
                
                if post.platform in ['telegram', 'all']:
                    success = await self.telegram_service.post_video(video_path, caption) or success
                
                if post.platform in ['vk', 'all']:
                    success = await self.vk_service.post_video(video_path, caption) or success
                
                # Cleanup
                if os.path.exists(video_path):
                    os.remove(video_path)
                
                return success
            else:
                # Regular post - download photos and publish
                logger.info("Detected regular post URL, downloading photos...")
                
                # Try to download post media
                try:
                    if not self.instagram_service.is_logged_in():
                        if not self.instagram_service.login():
                            logger.error("Failed to login to Instagram")
                            return False
                    
                    media_pk = self.instagram_service.client.media_pk_from_url(post.url)
                    media_info = self.instagram_service.client.media_info(media_pk)
                    
                    # Download photos
                    from config import UPLOADS_DIR
                    photo_paths = []
                    
                    if media_info.media_type == 1:  # Single photo
                        photo_path = self.instagram_service.client.photo_download(media_pk, folder=UPLOADS_DIR)
                        photo_paths = [str(photo_path)]
                    elif media_info.media_type == 8:  # Album
                        album_path = self.instagram_service.client.album_download(media_pk, folder=UPLOADS_DIR)
                        # album_download returns a list of paths
                        photo_paths = [str(p) for p in album_path] if isinstance(album_path, list) else [str(album_path)]
                    
                    if not photo_paths:
                        logger.error("No photos downloaded")
                        return False
                    
                    # Get caption
                    caption = media_info.caption_text if media_info.caption_text else "üì∏ –ù–æ–≤—ã–π –ø–æ—Å—Ç"
                    
                    # Process photos
                    processed_photos = self.image_processor.process_photos(photo_paths)
                    target_size = self.image_processor.determine_image_format(processed_photos)
                    final_photos = [self.image_processor.resize_image(p, target_size) for p in processed_photos]
                    
                    # Publish to platforms
                    success = False
                    if post.platform in ['instagram', 'all']:
                        success = self.instagram_service.post_to_instagram(final_photos, caption) or success
                    
                    if post.platform in ['telegram', 'all']:
                        success = await self.telegram_service.post_to_telegram(final_photos, caption) or success
                    
                    if post.platform in ['vk', 'all']:
                        success = await self.vk_service.post_to_vk(final_photos, caption) or success
                    
                    # Cleanup
                    self.image_processor.cleanup_files(photo_paths)
                    self.image_processor.cleanup_files(final_photos)
                    
                    return success
                    
                except Exception as e:
                    logger.error(f"Error downloading/publishing post: {e}")
                    return False
                    
        except Exception as e:
            logger.error(f"Error in _publish_from_queue: {e}")
            return False
